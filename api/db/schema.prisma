datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
  previewFeatures = ["fullTextSearch"]
  provider        = "prisma-client-js"
}

model ProgramOfStudy {
  id                Int                 @id @default(autoincrement())
  createdAt         DateTime            @default(now())
  active            Boolean             @default(false) //require admin approval
  programType       programType         @default(PREGRADO)
  name              String
  image             String
  description       String
  carrerType        carrerType
  classification    clasificationType?
  docenciaServicio  Boolean?
  credits           Int?
  sniesCode         String?
  coursesNumber     Int?
  spaceAvailable    Int?
  duration          Int?
  admissionPeriod   Int?
  headQuarterId     Int?                @unique
  headQuarter       HeadQuarter?        @relation(fields: [headQuarterId], references: [id])
  academicGroupId   Int?                @unique
  academicGroup     AcademicGroup?      @relation(fields: [academicGroupId], references: [id])
  //document
  acredition        Acredition[]
  qualifiedRegistry QualifiedRegistry[]
  selfAssessment    SelfAssessment[]
  programUpdate     ProgramUpdate[]
}

model Faculty {
  id             Int             @id @default(autoincrement())
  name           String
  createdAt      DateTime        @default(now())
  academicGroups AcademicGroup[]
}

model AcademicGroup {
  id              Int              @id @default(autoincrement())
  name            String
  createdAt       DateTime         @default(now())
  programsOfStudy ProgramOfStudy[]
  facultyId       Int?             @unique
  faculty         Faculty?         @relation(fields: [facultyId], references: [id])
}

model HeadQuarter {
  id              Int              @id @default(autoincrement())
  name            String
  description     String
  createdAt       DateTime         @default(now())
  programsOfStudy ProgramOfStudy[]
}

model Acredition {
  id             Int             @id @default(autoincrement())
  name           String
  createdAt      DateTime        @default(now())
  resolution     String?
  programId      Int?
  program        ProgramOfStudy? @relation(fields: [programId], references: [id])
  documents      Document[]
  expirationDate DateTime?
}

model QualifiedRegistry {
  id             Int             @id @default(autoincrement())
  name           String
  createdAt      DateTime        @default(now())
  resolution     String?
  programId      Int?
  program        ProgramOfStudy? @relation(fields: [programId], references: [id])
  documents      Document[]
  expirationDate DateTime?
}

model SelfAssessment {
  id             Int             @id @default(autoincrement())
  name           String
  createdAt      DateTime        @default(now())
  resolution     String?
  programId      Int?
  program        ProgramOfStudy? @relation(fields: [programId], references: [id])
  documents      Document[]
  expirationDate DateTime?
}

model ProgramUpdate {
  id             Int             @id @default(autoincrement())
  name           String
  createdAt      DateTime        @default(now())
  resolution     String?
  programId      Int?
  program        ProgramOfStudy? @relation(fields: [programId], references: [id])
  documents      Document[]
  expirationDate DateTime?
}

model Document {
  id                  Int                @id @default(autoincrement())
  name                String
  url                 String
  createdAt           DateTime           @default(now())
  acreditionId        Int?
  acredition          Acredition?        @relation(fields: [acreditionId], references: [id])
  qualifiedRegistryId Int?
  qualifiedRegistry   QualifiedRegistry? @relation(fields: [qualifiedRegistryId], references: [id])
  selfAssessment      SelfAssessment?    @relation(fields: [selfAssessmentId], references: [id])
  selfAssessmentId    Int?
  programUpdate       ProgramUpdate?     @relation(fields: [programUpdateId], references: [id])
  programUpdateId     Int?
}

model User {
  id                  Int       @id @default(autoincrement())
  name                String
  email               String    @unique
  roles               roleType  @default(CLIENT)
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime? @updatedAt
}

enum roleType {
  ADMIN  @map("admin")
  CLIENT @map("client")
}

enum programType {
  PREGRADO @map("PREGRADO")
  POSGRADO @map("POSGRADO")
}

enum clasificationType {
  ACREDITADO @map("ACREDITADO")
  ENESPERA   @map("ENESPERA")
  PROYECTADO @map("PROYECTADO")
}

enum carrerType {
  TECNICO                       @map("TECNICO")
  TECNOLOGO                     @map("TECNOLOGO")
  PROFESIONAL                   @map("PROFESIONAL")
  ESPECIALIZACION_TECNICA       @map("ESPECIALIZACION_TECNICA")
  ESPECIALIZACION_TECNOLOGICA   @map("ESPECIALIZACION_TECNOLOGICA")
  ESPECIALIZACION_UNIVERSITARIA @map("ESPECIALIZACION_UNIVERSITARIA")
  MAESTRIA                      @map("MAESTRIA")
  DOCTORADO                     @map("DOCTORADO")
}
